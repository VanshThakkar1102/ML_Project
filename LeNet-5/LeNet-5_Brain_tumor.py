# -*- coding: utf-8 -*-
"""CNN_leNet5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Tu-6mv6AUPN0F_SSQSNna21W90FB1e4
"""

import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import classification_report, confusion_matrix, precision_recall_fscore_support
import seaborn as sns

dataset_path = '/content/drive/MyDrive/Brain_tumor_dataset/Training'

img_size = (32, 32)
batch_size = 32

raw_train_ds = tf.keras.utils.image_dataset_from_directory(
    dataset_path,
    validation_split=0.2,
    subset="training",
    seed=42,
    image_size=img_size,
    color_mode='grayscale',
    batch_size=batch_size
)
class_names = raw_train_ds.class_names
num_classes = len(class_names)

# Performance boost
AUTOTUNE = tf.data.AUTOTUNE
train_ds = raw_train_ds.cache().shuffle(1000).prefetch(buffer_size=AUTOTUNE)

# Define LeNet-5 style model
model = models.Sequential([
    layers.Conv2D(6, kernel_size=5, activation='relu', input_shape=(32, 32, 1), padding='same'),
    layers.BatchNormalization(),
    layers.MaxPooling2D(pool_size=2),

    layers.Conv2D(16, kernel_size=5, activation='relu', padding='same'),
    layers.BatchNormalization(),
    layers.MaxPooling2D(pool_size=2),

    layers.Flatten(),
    layers.Dense(120, activation='relu'),
    layers.BatchNormalization(),
    layers.Dropout(0.5),

    layers.Dense(84, activation='relu'),
    layers.BatchNormalization(),
    layers.Dropout(0.5),

    layers.Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train model
history = model.fit(train_ds, epochs=10)

# Classification Report & Confusion Matrix on training data
y_true = []
y_pred = []

for images, labels in raw_train_ds:
    preds = model.predict(images)
    y_true.extend(labels.numpy())
    y_pred.extend(np.argmax(preds, axis=1))

print(" Classification Report Training Data :")
print(classification_report(y_true, y_pred, target_names=class_names))

cm = confusion_matrix(y_true, y_pred)
plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', xticklabels=class_names, yticklabels=class_names, cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix (Training Data)")
plt.show()

# Accuracy and Loss Graphs
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy', marker='o')
plt.title('Training Accuracy over Epochs')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.grid(True)
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss', marker='o', color='orange')
plt.title('Training Loss over Epochs')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.grid(True)
plt.legend()

plt.tight_layout()
plt.show()

dataset_test_path = '/content/drive/MyDrive/Brain_tumor_dataset/Testing'

# Load the test dataset on same preprocessing
test_ds = tf.keras.utils.image_dataset_from_directory(
    dataset_test_path,
    image_size=(32, 32),
    color_mode='grayscale',
    batch_size=32,
    shuffle=False  # Do not shuffle for evaluation
)

# Evaluate the trained model on test data
test_loss, test_acc = model.evaluate(test_ds)
print(f"\n Final Test Accuracy: {test_acc:.4f}")

# Classification report & confusion matrix on test data
y_true_test = []
y_pred_test = []
for images, labels in test_ds:
    preds = model.predict(images)
    y_true_test.extend(labels.numpy())
    y_pred_test.extend(np.argmax(preds, axis=1))

# Classification report
print("\n Classification Report on Test Data :")
print(classification_report(y_true_test, y_pred_test, target_names=class_names))

# Confusion matrix
class_names = ['Glioma', 'Meningioma', 'No', 'Pituitary']
cm_test = confusion_matrix(y_true_test, y_pred_test)
plt.figure(figsize=(3, 3))
sns.heatmap(cm_test, annot=True, fmt='d', cmap='Greens',
            xticklabels=class_names, yticklabels=class_names)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("CNN LesNet Model Testing Results")
plt.show()