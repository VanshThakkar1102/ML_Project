# -*- coding: utf-8 -*-
"""DenseNet_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18IjdD96rAcCNJPfd8JRqb3K1bjUpzMTy
"""

import tensorflow as tf
from tensorflow.keras.applications import DenseNet121
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.metrics import classification_report, confusion_matrix, precision_recall_fscore_support

train_path = '/content/drive/MyDrive/Brain_tumor_dataset/Training'
img_size = (224, 224)  # Required for DenseNet
batch_size = 32

raw_train_ds = tf.keras.utils.image_dataset_from_directory(
    train_path,
    validation_split=0.2,
    subset="training",
    seed=42,
    image_size=img_size,
    color_mode='rgb',
    batch_size=batch_size
)

class_names = raw_train_ds.class_names
num_classes = len(class_names)

AUTOTUNE = tf.data.AUTOTUNE
train_ds = raw_train_ds.cache().shuffle(1000).prefetch(buffer_size=AUTOTUNE)

# Load pre-trained DenseNet121 (no top)
base_model = DenseNet121(include_top=False,
                         weights='imagenet',
                         input_shape=(224, 224, 3))

base_model.trainable = False  # Freeze base for feature extraction

# Add classification head
model = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dropout(0.3),
    layers.Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(train_ds, epochs=10)

# Get predictions on training data
y_true, y_pred = [], []

for images, labels in raw_train_ds:
    preds = model.predict(images)
    y_true.extend(labels.numpy())
    y_pred.extend(np.argmax(preds, axis=1))

# Classification report
print("\n Classification Report on Training Data :")
print(classification_report(y_true, y_pred, target_names=class_names))

class_names = ['Glioma', 'Meningioma', 'No', 'Pituitary']
cm = confusion_matrix(y_true, y_pred)
plt.figure(figsize=(3, 3))
sns.heatmap(cm, annot=True, fmt='d', cmap='Purples',
            xticklabels=class_names, yticklabels=class_names)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix (Training Data)")
plt.show()

plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy', marker='o')
plt.title('Training Accuracy')
plt.xlabel('Epoch'); plt.ylabel('Accuracy')
plt.grid(True); plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss', marker='o', color='orange')
plt.title('Training Loss')
plt.xlabel('Epoch'); plt.ylabel('Loss')
plt.grid(True); plt.legend()

plt.tight_layout()
plt.show()

dataset_test_path = '/content/drive/MyDrive/Brain_tumor_dataset/Testing'

test_ds = tf.keras.utils.image_dataset_from_directory(
    dataset_test_path,
    image_size=(224, 224),
    color_mode='rgb',
    batch_size=32,
    shuffle=False
)

# Evaluate test accuracy
test_loss, test_acc = model.evaluate(test_ds)
print(f"\nðŸ§ª Final Test Accuracy: {test_acc:.4f}")

# Get predictions
y_true_test, y_pred_test = [], []

for images, labels in test_ds:
    preds = model.predict(images)
    y_true_test.extend(labels.numpy())
    y_pred_test.extend(np.argmax(preds, axis=1))

# Classification Report
print("\n Classification Report (Test Data):")
print(classification_report(y_true_test, y_pred_test, target_names=class_names))

# Confusion Matrix
class_names = ['Glioma', 'Meningioma', 'No', 'Pituitary']
cm_test = confusion_matrix(y_true_test, y_pred_test)
plt.figure(figsize=(3, 3))
sns.heatmap(cm_test, annot=True, fmt='d', cmap='Greens',
            xticklabels=class_names, yticklabels=class_names)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("DenseNet Model Testing Results")
plt.show()

labels = ['Accuracy', 'Precision', 'Recall', 'F1-Score']
lenet_scores = [0.48, 0.56, 0.48, 0.43]
efficient_scores = [0.68, 0.71, 0.68, 0.64]
dense_scores = [0.52, 0.58, 0.52, 0.48]

x = np.arange(len(labels))
width = 0.25

plt.figure(figsize=(10, 5))
plt.bar(x - width, lenet_scores, width, label='LeNet-5')
plt.bar(x, efficient_scores, width, label='EfficientNetB0')
plt.bar(x + width, dense_scores, width, label='DenseNet121')

plt.ylabel('Score')
plt.title('Model Performance Comparison')
plt.xticks(x, labels)
plt.ylim(0.3, 1.0)
plt.legend()
plt.grid(axis='y')
plt.show()