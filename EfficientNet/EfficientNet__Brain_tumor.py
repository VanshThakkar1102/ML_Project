# -*- coding: utf-8 -*-
"""efficientNet_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pIwZ5pO8nxmsuCVKVAmIq2qz7qWTZsJ6
"""

import tensorflow as tf
from tensorflow.keras.applications import EfficientNetB0
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.metrics import classification_report, confusion_matrix, precision_recall_fscore_support

train_path = '/content/drive/MyDrive/Brain_tumor_dataset/Training'
img_size = (224, 224)
batch_size = 32

raw_train_ds = tf.keras.utils.image_dataset_from_directory(
    train_path,
    validation_split=0.2,
    subset="training",
    seed=42,
    image_size=img_size,
    color_mode='rgb',
    batch_size=batch_size
)

class_names = raw_train_ds.class_names
num_classes = len(class_names)

AUTOTUNE = tf.data.AUTOTUNE
train_ds = raw_train_ds.cache().shuffle(1000).prefetch(buffer_size=AUTOTUNE)

# Load base model
base_model = EfficientNetB0(include_top=False,
                            weights='imagenet',
                            input_shape=(224, 224, 3))

base_model.trainable = False  # freeze the base for now

# Add classification head
model = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dropout(0.3),
    layers.Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(train_ds, epochs=10)

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy', marker='o')
plt.title('Training Accuracy')
plt.xlabel('Epoch'); plt.ylabel('Accuracy'); plt.grid(True); plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss', marker='o', color='orange')
plt.title('Training Loss')
plt.xlabel('Epoch'); plt.ylabel('Loss'); plt.grid(True); plt.legend()
plt.tight_layout()
plt.show()

y_true, y_pred = [], []
for images, labels in raw_train_ds:
    preds = model.predict(images)
    y_true.extend(labels.numpy())
    y_pred.extend(np.argmax(preds, axis=1))

print("\n Classification Report on Training Data :")
print(classification_report(y_true, y_pred, target_names=class_names))

class_names = ['Glioma', 'MG', 'No', 'Pituitary']
cm = confusion_matrix(y_true, y_pred)
plt.figure(figsize=(3, 3))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=class_names, yticklabels=class_names)
plt.xlabel("Predicted"); plt.ylabel("Actual")
plt.title("Confusion Matrix (Training Data)")
plt.show()

dataset_test_path = '/content/drive/MyDrive/Brain_tumor_dataset/Testing'

test_ds = tf.keras.utils.image_dataset_from_directory(
    dataset_test_path,
    image_size=(224, 224),
    color_mode='rgb',
    batch_size=32,
    shuffle=False
)

# Evaluating the accuracy based on test data
test_loss, test_acc = model.evaluate(test_ds)
print(f"\n Final Test Accuracy: {test_acc:.4f}")

# test predictions and true labels
y_true_test, y_pred_test = [], []

for images, labels in test_ds:
    preds = model.predict(images)
    y_true_test.extend(labels.numpy())
    y_pred_test.extend(np.argmax(preds, axis=1))

# Classification Report
class_names = ['Glioma', 'MG', 'No', 'Pituitary']
print("\n Classification Report on Test Data :")
print(classification_report(y_true_test, y_pred_test, target_names=class_names))

# Confusion Matrix
cm = confusion_matrix(y_true_test, y_pred_test)
plt.figure(figsize=(6, 2))
sns.heatmap(cm, annot=True, fmt='d', cmap='Greens',
            xticklabels=class_names, yticklabels=class_names)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("EfficientNet Model Testing results")
plt.show()